# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
name: FPS submission checks
on: pull_request_target
jobs:
  PR-Actions:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.read_results.outputs.contents }}
    steps:
      - name: Get the PR version of the files
        uses: actions/checkout@v2
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"
          path: "pull-request"
      - name: Get the version at main
        uses: actions/checkout@v2
        with:
          path: "main"
      - name: Get necessary libraries
        run: pip install publicsuffix2
      - name: Content check
        id: check
        run: python3 main/check_sites.py -i pull-request/first_party_sets.JSON --data_directory=main --with_diff > results.txt
      - name: Install prettier
        run: npm install --global prettier
      - name: Run prettier check 
        id: prettier_check
        continue-on-error: true
        shell: bash
        run: |
         output=$(prettier --check "**/first_party_sets.JSON")
         echo "$output"
         files_to_reformat=$(echo "$output" | grep -v "Checking formatting...")
         echo "files=$files_to_reformat" >> $GITHUB_ENV
         echo "$files"

        # if echo "$output" | grep -q "Run Prettier to fix"; then 
        #   echo "Prettier action check failed"
        #   echo $output
        #   echo "prettier_result=$output" >> $GITHUB_ENV
        #   echo $output >> $GITHUB_OUTPUT 
        # else
        #   echo "Prettier action check passed"
        #   echo "success"
        #   echo $output
        #   echo "prettier_result=success" >> $GITHUB_ENV
        # fi
      - name: Read the result
        id: read_results
        uses: andstor/file-reader-action@v1
        with:
          path: "results.txt"
      - name: File contents
        env:
          CONTENTS: ${{ steps.read_results.outputs.contents }}
        run: echo "$CONTENTS"
      - name: Create Comment
        if: steps.read_results.outputs.contents != 'success'
        run: |
         echo "It appears you have failed some tests. Here are your results:" > message.txt
         cat results.txt >> message.txt   
      - name: Add Prettier Results to Comment
        #if: steps.prettier_check.outputs.prettier_output != 'success'
        run: |
          if [[ -z "$files" ]]; then
          echo "All files are formatted correctly!"
          else
          echo "Formatting issues found."
          echo "It appears you have failed the prettier check. Here are your results:" >> message.txt
          echo "$files" >> message.txt
          fi
        
        # echo "It appears you have failed the prettier check. Here are your results:" >> message.txt
        # echo "$prettier_result"
        # echo "$prettier_result" >> message.txt
        # echo "Using output"
        # echo ${{ steps.prettier_check.outputs.prettier_output }}
        # echo ${{ steps.prettier_check.outputs.prettier_output }} >> message.txt
      - name: Comment if sucess
        if: steps.read_results.outputs.contents == 'success' && ${{ env.files }}
        run: echo "Looks like you've passed all of the checks!" >> message.txt
      - name: Write Comment on PR
        uses: mshick/add-pr-comment@v2
        with:   
          message-path: "message.txt" 
          refresh-message-position: true
      - name: Fail or Succeed
        if: steps.read_results.outputs.contents != 'success' || !${{ env.files }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('This run has failed. Check `File Contents` to see why.')
